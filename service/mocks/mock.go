// Code generated by MockGen. DO NOT EDIT.
// Source: robot.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	domain "github.com/Marseek/tfs-go-hw/course/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockrepoInterface is a mock of repoInterface interface.
type MockrepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockrepoInterfaceMockRecorder
}

// MockrepoInterfaceMockRecorder is the mock recorder for MockrepoInterface.
type MockrepoInterfaceMockRecorder struct {
	mock *MockrepoInterface
}

// NewMockrepoInterface creates a new mock instance.
func NewMockrepoInterface(ctrl *gomock.Controller) *MockrepoInterface {
	mock := &MockrepoInterface{ctrl: ctrl}
	mock.recorder = &MockrepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrepoInterface) EXPECT() *MockrepoInterfaceMockRecorder {
	return m.recorder
}

// GetTotalProfitDb mocks base method.
func (m *MockrepoInterface) GetTotalProfitDb(ctx context.Context) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalProfitDb", ctx)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalProfitDb indicates an expected call of GetTotalProfitDb.
func (mr *MockrepoInterfaceMockRecorder) GetTotalProfitDb(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalProfitDb", reflect.TypeOf((*MockrepoInterface)(nil).GetTotalProfitDb), ctx)
}

// GetUsersMap mocks base method.
func (m *MockrepoInterface) GetUsersMap(arg0 string) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersMap", arg0)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetUsersMap indicates an expected call of GetUsersMap.
func (mr *MockrepoInterfaceMockRecorder) GetUsersMap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersMap", reflect.TypeOf((*MockrepoInterface)(nil).GetUsersMap), arg0)
}

// SendOrder mocks base method.
func (m *MockrepoInterface) SendOrder(symbol, side string, size int, addr string) (domain.APIResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOrder", symbol, side, size, addr)
	ret0, _ := ret[0].(domain.APIResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendOrder indicates an expected call of SendOrder.
func (mr *MockrepoInterfaceMockRecorder) SendOrder(symbol, side, size, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOrder", reflect.TypeOf((*MockrepoInterface)(nil).SendOrder), symbol, side, size, addr)
}

// SetWSConnection mocks base method.
func (m *MockrepoInterface) SetWSConnection(addr, tick string) (chan domain.WsResponse, func(), error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWSConnection", addr, tick)
	ret0, _ := ret[0].(chan domain.WsResponse)
	ret1, _ := ret[1].(func())
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetWSConnection indicates an expected call of SetWSConnection.
func (mr *MockrepoInterfaceMockRecorder) SetWSConnection(addr, tick interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWSConnection", reflect.TypeOf((*MockrepoInterface)(nil).SetWSConnection), addr, tick)
}

// WriteOrderToDb mocks base method.
func (m *MockrepoInterface) WriteOrderToDb(ctx context.Context, inst string, size int, side string, price float32, ordtype string, profit, stoploss float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteOrderToDb", ctx, inst, size, side, price, ordtype, profit, stoploss)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteOrderToDb indicates an expected call of WriteOrderToDb.
func (mr *MockrepoInterfaceMockRecorder) WriteOrderToDb(ctx, inst, size, side, price, ordtype, profit, stoploss interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteOrderToDb", reflect.TypeOf((*MockrepoInterface)(nil).WriteOrderToDb), ctx, inst, size, side, price, ordtype, profit, stoploss)
}

// WriteToTelegramBot mocks base method.
func (m *MockrepoInterface) WriteToTelegramBot(text string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteToTelegramBot", text)
}

// WriteToTelegramBot indicates an expected call of WriteToTelegramBot.
func (mr *MockrepoInterfaceMockRecorder) WriteToTelegramBot(text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteToTelegramBot", reflect.TypeOf((*MockrepoInterface)(nil).WriteToTelegramBot), text)
}

// MockRobotInterface is a mock of RobotInterface interface.
type MockRobotInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRobotInterfaceMockRecorder
}

// MockRobotInterfaceMockRecorder is the mock recorder for MockRobotInterface.
type MockRobotInterfaceMockRecorder struct {
	mock *MockRobotInterface
}

// NewMockRobotInterface creates a new mock instance.
func NewMockRobotInterface(ctrl *gomock.Controller) *MockRobotInterface {
	mock := &MockRobotInterface{ctrl: ctrl}
	mock.recorder = &MockRobotInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRobotInterface) EXPECT() *MockRobotInterfaceMockRecorder {
	return m.recorder
}

// GetParams mocks base method.
func (m *MockRobotInterface) GetParams() domain.Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParams")
	ret0, _ := ret[0].(domain.Options)
	return ret0
}

// GetParams indicates an expected call of GetParams.
func (mr *MockRobotInterfaceMockRecorder) GetParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParams", reflect.TypeOf((*MockRobotInterface)(nil).GetParams))
}

// GetUsersMap mocks base method.
func (m *MockRobotInterface) GetUsersMap(arg0 string) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersMap", arg0)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetUsersMap indicates an expected call of GetUsersMap.
func (mr *MockRobotInterfaceMockRecorder) GetUsersMap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersMap", reflect.TypeOf((*MockRobotInterface)(nil).GetUsersMap), arg0)
}

// SetParams mocks base method.
func (m *MockRobotInterface) SetParams(start, size int, profit float32, ticker, side string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetParams", start, size, profit, ticker, side)
}

// SetParams indicates an expected call of SetParams.
func (mr *MockRobotInterfaceMockRecorder) SetParams(start, size, profit, ticker, side interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetParams", reflect.TypeOf((*MockRobotInterface)(nil).SetParams), start, size, profit, ticker, side)
}

// SetParamsWithoutStart mocks base method.
func (m *MockRobotInterface) SetParamsWithoutStart(size int, profit float32, ticker, side string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetParamsWithoutStart", size, profit, ticker, side)
}

// SetParamsWithoutStart indicates an expected call of SetParamsWithoutStart.
func (mr *MockRobotInterfaceMockRecorder) SetParamsWithoutStart(size, profit, ticker, side interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetParamsWithoutStart", reflect.TypeOf((*MockRobotInterface)(nil).SetParamsWithoutStart), size, profit, ticker, side)
}

// SetStart mocks base method.
func (m *MockRobotInterface) SetStart(start int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStart", start)
}

// SetStart indicates an expected call of SetStart.
func (mr *MockRobotInterfaceMockRecorder) SetStart(start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStart", reflect.TypeOf((*MockRobotInterface)(nil).SetStart), start)
}
